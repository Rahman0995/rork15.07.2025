#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥
console.log('üîß –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞...');

const backend = spawn('node', ['start-backend-simple.js'], {
  stdio: 'pipe',
  env: {
    ...process.env,
    NODE_ENV: 'development',
    PORT: '3000',
    HOST: '0.0.0.0'
  }
});

let backendReady = false;

backend.stdout.on('data', (data) => {
  const output = data.toString();
  console.log('BACKEND:', output.trim());
  
  if (output.includes('–∑–∞–ø—É—â–µ–Ω –Ω–∞') || output.includes('running on')) {
    backendReady = true;
    startFrontend();
  }
});

backend.stderr.on('data', (data) => {
  console.error('BACKEND ERROR:', data.toString().trim());
});

backend.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞:', error.message);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤
function startFrontend() {
  if (!backendReady) return;
  
  console.log('üîß –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  const frontend = spawn('npx', ['expo', 'start', '--tunnel', '--port', '8081'], {
    stdio: 'inherit',
    env: {
      ...process.env,
      NODE_ENV: 'development'
    }
  });

  frontend.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error.message);
    backend.kill();
    process.exit(1);
  });

  frontend.on('close', (code) => {
    console.log(`üèÅ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    backend.kill();
    process.exit(code);
  });

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    frontend.kill('SIGINT');
    backend.kill('SIGINT');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    frontend.kill('SIGTERM');
    backend.kill('SIGTERM');
    process.exit(0);
  });
}

// –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
setTimeout(() => {
  if (!backendReady) {
    console.log('‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å mock –¥–∞–Ω–Ω—ã–º–∏...');
    backendReady = true;
    startFrontend();
  }
}, 10000);