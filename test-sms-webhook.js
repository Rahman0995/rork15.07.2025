const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–π payload –¥–ª—è webhook
const testPayload = {
  type: 'user.created',
  table: 'auth.users',
  record: {
    id: '12345',
    email: 'test@example.com',
    phone: '+79991234567',
    created_at: new Date().toISOString(),
  },
  schema: 'auth',
};

// Webhook secret –∏–∑ .env
const webhookSecret = 'v1,whsec_ll6hvMMRV620VYFElyWffcT7PhKszRkpjf/kdVds8VZOWHCwxqFBo18/sle4qvMUxi0nfLO3HkZH2AW';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createWebhookSignature(payload, secret) {
  const secretKey = secret.replace('v1,whsec_', '');
  const payloadString = JSON.stringify(payload);
  
  const signature = crypto
    .createHmac('sha256', secretKey)
    .update(payloadString, 'utf8')
    .digest('base64');
  
  return `v1=${signature}`;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook
async function testWebhook() {
  const payloadString = JSON.stringify(testPayload);
  const signature = createWebhookSignature(testPayload, webhookSecret);
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMS Webhook');
  console.log('üì¶ Payload:', payloadString);
  console.log('üîê Signature:', signature);
  
  try {
    const response = await fetch('http://localhost:3000/api/webhooks/supabase/sms', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-supabase-signature': signature,
      },
      body: payloadString,
    });
    
    const result = await response.text();
    
    console.log('üìä Response Status:', response.status);
    console.log('üìã Response:', result);
    
    if (response.ok) {
      console.log('‚úÖ Webhook test successful!');
    } else {
      console.log('‚ùå Webhook test failed!');
    }
  } catch (error) {
    console.error('‚ùå Error testing webhook:', error.message);
    console.log('üí° Make sure your backend is running on port 3000');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testWebhook();