#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render...');

const port = process.env.PORT || 3000;
const distPath = path.join(__dirname, 'dist');

console.log(`üìÅ –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏: ${distPath}`);
console.log(`üåê –ü–æ—Ä—Ç: ${port}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ dist
if (!fs.existsSync(distPath)) {
  console.error('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–±–æ—Ä–∫—É.');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist
const files = fs.readdirSync(distPath);
console.log('üìã –§–∞–π–ª—ã –≤ dist:', files);

if (files.length === 0) {
  console.error('‚ùå –ü–∞–ø–∫–∞ dist –ø—É—Å—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–±–æ—Ä–∫—É.');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º serve —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const serve = spawn('npx', ['serve', distPath, '-p', port, '-s'], {
  stdio: 'inherit',
  env: { ...process.env }
});

serve.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
});

serve.on('close', (code) => {
  console.log(`üîö –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
  process.exit(code);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  serve.kill('SIGTERM');
});

process.on('SIGINT', () => {
  console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  serve.kill('SIGINT');
});