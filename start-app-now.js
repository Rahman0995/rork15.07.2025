#!/usr/bin/env node

const { spawn } = require('child_process');
const net = require('net');
const os = require('os');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return '192.168.1.100'; // fallback
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
function isPortFree(port) {
  return new Promise((resolve) => {
    const server = net.createServer();
    server.listen(port, () => {
      server.once('close', () => resolve(true));
      server.close();
    });
    server.on('error', () => resolve(false));
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
async function findFreePort(startPort = 3000) {
  for (let port = startPort; port <= startPort + 100; port++) {
    if (await isPortFree(port)) {
      return port;
    }
  }
  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
function killProcessOnPort(port) {
  return new Promise((resolve) => {
    const killProcess = spawn('lsof', ['-ti', `:${port}`], { stdio: 'pipe' });
    
    killProcess.stdout.on('data', (data) => {
      const pids = data.toString().trim().split('\n').filter(pid => pid);
      if (pids.length > 0) {
        console.log(`üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${pids.join(', ')}`);
        pids.forEach(pid => {
          try {
            process.kill(parseInt(pid), 'SIGTERM');
          } catch (e) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
          }
        });
      }
      resolve();
    });
    
    killProcess.on('error', () => resolve());
    killProcess.on('exit', () => resolve());
  });
}

async function startApp() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 3000 –∏ 8081
    await killProcessOnPort(3000);
    await killProcessOnPort(8081);
    
    // –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
    const backendPort = await findFreePort(3000);
    const localIP = getLocalIP();
    
    console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –¥–ª—è –±—ç–∫–µ–Ω–¥–∞: ${backendPort}`);
    console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP: ${localIP}`);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const env = {
      ...process.env,
      PORT: backendPort.toString(),
      NODE_ENV: 'development',
      RORK_API_BASE_URL: `http://${localIP}:${backendPort}`,
      EXPO_PUBLIC_RORK_API_BASE_URL: `http://${localIP}:${backendPort}`,
    };
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä
    console.log('üì° –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞...');\n    const backend = spawn('node', ['start-backend-simple.js'], {\n      env: { ...env, PORT: backendPort },\n      stdio: 'inherit'\n    });\n    \n    backend.on('error', (error) => {\n      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞:', error);\n    });\n    \n    // –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    // –ó–∞–ø—É—Å—Ç–∏—Ç—å Expo\n    console.log('üì± –ó–∞–ø—É—Å–∫ Expo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');\n    const frontend = spawn('npx', ['expo', 'start', '--clear'], {\n      env,\n      stdio: 'inherit'\n    });\n    \n    frontend.on('error', (error) => {\n      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend:', error);\n    });\n    \n    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n    process.on('SIGINT', () => {\n      console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');\n      backend.kill('SIGINT');\n      frontend.kill('SIGINT');\n      process.exit(0);\n    });\n    \n    process.on('SIGTERM', () => {\n      console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');\n      backend.kill('SIGTERM');\n      frontend.kill('SIGTERM');\n      process.exit(0);\n    });\n    \n    console.log('\\nüéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');\n    console.log(`üì° Backend: http://${localIP}:${backendPort}/api`);\n    console.log(`‚ù§Ô∏è Health Check: http://${localIP}:${backendPort}/api/health`);\n    console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ Expo Go –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥');\n    console.log('üåê –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–± –≤–µ—Ä—Å–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ');\n    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');\n    \n  } catch (error) {\n    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);\n    process.exit(1);\n  }\n}\n\nstartApp();