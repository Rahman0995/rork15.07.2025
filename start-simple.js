#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º...');

// –û—á–∏—â–∞–µ–º –∫—ç—à–∏
console.log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à–∏...');
const cacheDirs = [
  'node_modules/.cache',
  '.expo',
  '.metro',
  '/tmp/metro-cache',
  '/tmp/haste-map-metro-cache'
];

cacheDirs.forEach(dir => {
  try {
    if (fs.existsSync(dir)) {
      fs.rmSync(dir, { recursive: true, force: true });
      console.log(`‚úÖ –û—á–∏—â–µ–Ω: ${dir}`);
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å ${dir}:`, error.message);
  }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.WATCHMAN_DISABLE_WATCH = '1';
process.env.EXPO_NO_DOTENV = '1';
process.env.EXPO_NO_CACHE = '1';

console.log('üì± –ó–∞–ø—É—Å–∫–∞–µ–º Expo...');

try {
  // –ó–∞–ø—É—Å–∫–∞–µ–º expo —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
  execSync('npx expo start --tunnel --port 8081 --clear', {
    stdio: 'inherit',
    env: {
      ...process.env,
      WATCHMAN_DISABLE_WATCH: '1',
      EXPO_NO_DOTENV: '1',
      EXPO_NO_CACHE: '1'
    }
  });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
  process.exit(1);
}