#!/usr/bin/env node

// Simple script to add sample data to the database
const mysql = require('mysql2/promise');

async function addSampleData() {
  let connection;
  
  try {
    console.log('üîß Connecting to database...');
    
    // Create connection - adjust these settings to match your database
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'military_app',
      port: process.env.DB_PORT || 3306
    });
    
    console.log('‚úÖ Connected to database');
    
    // Check if data already exists
    const [existingTasks] = await connection.execute('SELECT COUNT(*) as count FROM tasks');
    const [existingReports] = await connection.execute('SELECT COUNT(*) as count FROM reports');
    
    if (existingTasks[0].count > 0 || existingReports[0].count > 0) {
      console.log('üìù Sample data already exists, skipping...');
      return;
    }
    
    console.log('üìù Adding sample tasks...');
    
    // Add sample tasks
    const sampleTasks = [
      {
        id: 'task-1',
        title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—Ç–æ—Ä–µ –ê.',
        assignedTo: 'user-2',
        createdBy: 'user-1',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        status: 'pending',
        priority: 'high'
      },
      {
        id: 'task-2',
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        description: '–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –Ω–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.',
        assignedTo: 'user-3',
        createdBy: 'user-1',
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
        status: 'in_progress',
        priority: 'medium'
      },
      {
        id: 'task-3',
        title: '–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞.',
        assignedTo: 'user-4',
        createdBy: 'user-2',
        dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),
        status: 'pending',
        priority: 'high'
      }
    ];

    for (const task of sampleTasks) {
      await connection.execute(
        'INSERT INTO tasks (id, title, description, assigned_to, created_by, due_date, status, priority) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [task.id, task.title, task.description, task.assignedTo, task.createdBy, task.dueDate, task.status, task.priority]
      );
    }

    console.log('üìù Adding sample reports...');
    
    // Add sample reports
    const sampleReports = [
      {
        id: 'report-1',
        title: '–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—á–µ–Ω–∏–π',
        content: '–ü—Ä–æ–≤–µ–¥–µ–Ω—ã –ø–ª–∞–Ω–æ–≤—ã–µ —É—á–µ–Ω–∏—è –ø–æ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Å—Ä–æ–∫.',
        authorId: 'user-1',
        status: 'pending',
        type: 'text',
        unit: '1-–π –±–∞—Ç–∞–ª—å–æ–Ω',
        priority: 'high',
        currentRevision: 1
      },
      {
        id: 'report-2',
        title: '–û—Ç—á–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
        content: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –í—ã—è–≤–ª–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏.',
        authorId: 'user-2',
        status: 'approved',
        type: 'text',
        unit: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞',
        priority: 'medium',
        currentRevision: 1
      },
      {
        id: 'report-3',
        title: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Å–µ–∫—Ç–æ—Ä–µ –ë',
        content: '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Å–µ–∫—Ç–æ—Ä–µ –ë. –ü—Ä–∏–Ω—è—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã.',
        authorId: 'user-3',
        status: 'needs_revision',
        type: 'incident',
        unit: '2-—è —Ä–æ—Ç–∞',
        priority: 'high',
        currentRevision: 1
      }
    ];

    for (const report of sampleReports) {
      await connection.execute(
        'INSERT INTO reports (id, title, content, author_id, status, type, unit, priority, current_revision) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
        [report.id, report.title, report.content, report.authorId, report.status, report.type, report.unit, report.priority, report.currentRevision]
      );
    }

    console.log('‚úÖ Sample data added successfully!');
    
  } catch (error) {
    console.error('‚ùå Error adding sample data:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîÑ Database connection closed');
    }
  }
}

// Run the script
addSampleData();