# Railway-optimized Dockerfile
FROM node:18-alpine as base
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache git python3 make g++

# Copy package files
COPY package.json ./

# Remove problematic dependencies for web build
RUN node -e "
const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
const excludeForWeb = [
  'better-sqlite3', 
  '@types/better-sqlite3', 
  'expo-sqlite',
  'sqlite3'
];
excludeForWeb.forEach(dep => {
  delete pkg.dependencies[dep];
  delete pkg.devDependencies[dep];
});
require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
console.log('âœ… Cleaned package.json for Railway build');
"

# Install dependencies with npm (more reliable on Railway)
RUN npm install --legacy-peer-deps

# Copy source code
COPY . .

# Set environment variables
ENV NODE_ENV=production
ENV EXPO_USE_FAST_RESOLVER=1

# Clean any existing builds
RUN rm -rf dist/ build/ .expo/

# Install expo CLI globally
RUN npm install -g @expo/cli

# Export web version
RUN npx expo export --platform web --output-dir dist

# Production stage with nginx
FROM nginx:alpine as production

# Copy built web app
COPY --from=base /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]