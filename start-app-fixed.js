#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Backend + Frontend)...');

let backendProcess = null;
let frontendProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
function startBackend() {
  return new Promise((resolve, reject) => {
    console.log('üì° –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const backendPath = path.join(__dirname, 'backend');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å bun
    backendProcess = spawn('bun', ['run', 'index.ts'], {
      cwd: backendPath,
      stdio: ['inherit', 'pipe', 'pipe']
    });
    
    let backendStarted = false;
    
    backendProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`[Backend] ${output.trim()}`);
      
      if (output.includes('Server is running') && !backendStarted) {
        backendStarted = true;
        console.log('‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        resolve();
      }
    });
    
    backendProcess.stderr.on('data', (data) => {
      const output = data.toString();
      console.error(`[Backend Error] ${output.trim()}`);
    });
    
    backendProcess.on('error', (error) => {
      if (error.code === 'ENOENT') {
        console.log('‚ö†Ô∏è bun –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å node...');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å node
        backendProcess = spawn('npx', ['ts-node', 'index.ts'], {
          cwd: backendPath,
          stdio: ['inherit', 'pipe', 'pipe']
        });
        
        backendProcess.stdout.on('data', (data) => {
          const output = data.toString();
          console.log(`[Backend] ${output.trim()}`);
          
          if (output.includes('Server is running') && !backendStarted) {
            backendStarted = true;
            console.log('‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            resolve();
          }
        });
        
        backendProcess.stderr.on('data', (data) => {
          const output = data.toString();
          console.error(`[Backend Error] ${output.trim()}`);
        });
        
        backendProcess.on('error', (nodeError) => {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend:', nodeError.message);
          reject(nodeError);
        });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend:', error.message);
        reject(error);
      }
    });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
    setTimeout(() => {
      if (!backendStarted) {
        console.log('‚úÖ Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
        resolve();
      }
    }, 5000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend
function startFrontend() {
  return new Promise((resolve, reject) => {
    console.log('üì± –ó–∞–ø—É—Å–∫ Expo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    frontendProcess = spawn('npx', ['expo', 'start', '--tunnel'], {
      stdio: ['inherit', 'pipe', 'pipe']
    });
    
    let frontendStarted = false;
    
    frontendProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`[Frontend] ${output.trim()}`);
      
      if ((output.includes('Metro waiting') || output.includes('Expo DevTools')) && !frontendStarted) {
        frontendStarted = true;
        console.log('‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        resolve();
      }
    });
    
    frontendProcess.stderr.on('data', (data) => {
      const output = data.toString();
      console.error(`[Frontend Error] ${output.trim()}`);
    });
    
    frontendProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend:', error.message);
      reject(error);
    });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend
    setTimeout(() => {
      if (!frontendStarted) {
        console.log('‚úÖ Frontend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
        resolve();
      }
    }, 10000);
  });
}

// Graceful shutdown
function cleanup() {
  console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
  
  if (backendProcess) {
    backendProcess.kill('SIGTERM');
  }
  
  if (frontendProcess) {
    frontendProcess.kill('SIGTERM');
  }
  
  setTimeout(() => {
    process.exit(0);
  }, 2000);
}

process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startApp() {
  try {
    await startBackend();
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º frontend...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    await startFrontend();
    
    console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ Expo Go –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥');
    console.log('üåê –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–± –≤–µ—Ä—Å–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
    cleanup();
  }
}

startApp();