#!/usr/bin/env node

const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
function fixFileWatchers() {
  try {
    console.log('üîß –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
    const currentLimit = execSync('cat /proc/sys/fs/inotify/max_user_watches', { encoding: 'utf8' }).trim();
    console.log(`–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: ${currentLimit}`);
    
    if (parseInt(currentLimit) < 524288) {
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
      execSync('echo 524288 | sudo tee /proc/sys/fs/inotify/max_user_watches', { stdio: 'inherit' });
      console.log('‚úÖ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —É–≤–µ–ª–∏—á–µ–Ω');
    } else {
      console.log('‚úÖ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ sudo)');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: sudo sysctl fs.inotify.max_user_watches=524288');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
function clearCache() {
  try {
    console.log('üîß –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...');
    
    const cacheDirs = [
      '.expo',
      'node_modules/.cache',
      '.metro'
    ];
    
    for (const dir of cacheDirs) {
      if (fs.existsSync(dir)) {
        execSync(`rm -rf ${dir}`, { stdio: 'inherit' });
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à: ${dir}`);
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function main() {
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
  fixFileWatchers();
  clearCache();
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥
  console.log('üîß –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  const backend = spawn('node', ['start-backend-simple.js'], {
    stdio: 'pipe',
    env: {
      ...process.env,
      NODE_ENV: 'development',
      PORT: '3000',
      HOST: '0.0.0.0'
    }
  });

  let backendReady = false;

  backend.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('BACKEND:', output.trim());
    
    if (output.includes('–∑–∞–ø—É—â–µ–Ω –Ω–∞') || output.includes('running on')) {
      backendReady = true;
      setTimeout(startFrontend, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    }
  });

  backend.stderr.on('data', (data) => {
    console.error('BACKEND ERROR:', data.toString().trim());
  });

  backend.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞:', error.message);
    console.log('üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å mock –¥–∞–Ω–Ω—ã–º–∏...');
    setTimeout(startFrontend, 1000);
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
  function startFrontend() {
    console.log('üîß –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    const frontend = spawn('npx', ['expo', 'start', '--tunnel', '--port', '8081', '--clear'], {
      stdio: 'inherit',
      env: {
        ...process.env,
        NODE_ENV: 'development',
        EXPO_DEVTOOLS_LISTEN_ADDRESS: '0.0.0.0'
      }
    });

    frontend.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error.message);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞...');
      const altFrontend = spawn('npx', ['expo', 'start', '--port', '8081'], {
        stdio: 'inherit',
        env: {
          ...process.env,
          NODE_ENV: 'development'
        }
      });
      
      altFrontend.on('error', (altError) => {
        console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:', altError.message);
        backend.kill();
        process.exit(1);
      });
    });

    frontend.on('close', (code) => {
      console.log(`üèÅ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
      backend.kill();
      process.exit(code);
    });

    // Graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      frontend.kill('SIGINT');
      backend.kill('SIGINT');
      process.exit(0);
    });

    process.on('SIGTERM', () => {
      console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      frontend.kill('SIGTERM');
      backend.kill('SIGTERM');
      process.exit(0);
    });
  }

  // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  setTimeout(() => {
    if (!backendReady) {
      console.log('‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å mock –¥–∞–Ω–Ω—ã–º–∏...');
      startFrontend();
    }
  }, 15000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});