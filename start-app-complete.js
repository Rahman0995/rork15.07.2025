#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(command, args, name, color = '\x1b[36m') {
  const process = spawn(command, args, {
    stdio: 'pipe',
    cwd: path.resolve('.'),
    env: { ...process.env }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
  process.stdout.on('data', (data) => {
    const lines = data.toString().split('\n').filter(line => line.trim());
    lines.forEach(line => {
      console.log(`${color}[${name}]\x1b[0m ${line}`);
    });
  });

  process.stderr.on('data', (data) => {
    const lines = data.toString().split('\n').filter(line => line.trim());
    lines.forEach(line => {
      console.log(`\x1b[31m[${name} ERROR]\x1b[0m ${line}`);
    });
  });

  process.on('error', (error) => {
    console.error(`\x1b[31m‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}:\x1b[0m`, error.message);
  });

  return process;
}

console.log('1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...');
const backend = startProcess('node', ['start-backend-simple.js'], 'BACKEND', '\x1b[32m');

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(() => {
  console.log('\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
  const frontend = startProcess('npx', ['expo', 'start', '--clear'], 'FRONTEND', '\x1b[34m');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...');
    backend.kill('SIGINT');
    frontend.kill('SIGINT');
    setTimeout(() => process.exit(0), 1000);
  });

  process.on('SIGTERM', () => {
    console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...');
    backend.kill('SIGTERM');
    frontend.kill('SIGTERM');
    setTimeout(() => process.exit(0), 1000);
  });

}, 3000);

console.log('\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
console.log('- –ë—ç–∫–µ–Ω–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000');
console.log('- –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
console.log('- –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥');
console.log('- –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
console.log('\nüîç –õ–æ–≥–∏:');
console.log('- \x1b[32m[BACKEND]\x1b[0m - —Å–æ–æ–±—â–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞');
console.log('- \x1b[34m[FRONTEND]\x1b[0m - —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
console.log('- \x1b[31m[ERROR]\x1b[0m - –æ—à–∏–±–∫–∏\n');