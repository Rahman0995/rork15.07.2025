#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

console.log('üîß –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

async function killPort(port) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç ${port}...`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
    const { stdout } = await execAsync(`lsof -ti:${port}`).catch(() => ({ stdout: '' }));
    
    if (stdout.trim()) {
      const pids = stdout.trim().split('\n');
      console.log(`üíÄ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${pids.join(', ')}`);
      
      for (const pid of pids) {
        if (pid) {
          await execAsync(`kill -9 ${pid}`).catch(() => {});
        }
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
    } else {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç ${port}:`, error.message);
  }
}

async function startBackend() {
  return new Promise((resolve) => {
    console.log('üì° –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const backend = spawn('node', ['backend/index.ts'], {
      stdio: 'pipe',
      env: { ...process.env, NODE_ENV: 'development' }
    });

    backend.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`[Backend] ${output.trim()}`);
      
      if (output.includes('Server running') || output.includes('üöÄ')) {
        resolve(backend);
      }
    });

    backend.stderr.on('data', (data) => {
      console.log(`[Backend Error] ${data.toString().trim()}`);
    });

    backend.on('error', (error) => {
      console.log(`[Backend Error] ${error.message}`);
      resolve(backend);
    });

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    setTimeout(() => {
      console.log('‚úÖ Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
      resolve(backend);
    }, 5000);
  });
}

async function startFrontend() {
  return new Promise((resolve) => {
    console.log('üì± –ó–∞–ø—É—Å–∫ Expo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    const frontend = spawn('npx', ['expo', 'start', '--port', '8082', '--web-only'], {
      stdio: 'pipe',
      env: { ...process.env }
    });

    frontend.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`[Frontend] ${output.trim()}`);
    });

    frontend.stderr.on('data', (data) => {
      const error = data.toString();
      if (!error.includes('ExpoConfigError') && !error.includes('Warning')) {
        console.log(`[Frontend Error] ${error.trim()}`);
      }
    });

    frontend.on('error', (error) => {
      console.log(`[Frontend Error] ${error.message}`);
      resolve(frontend);
    });

    // –¢–∞–π–º–∞—É—Ç
    setTimeout(() => {
      console.log('‚úÖ Frontend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
      resolve(frontend);
    }, 10000);
  });
}

async function main() {
  try {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
    await killPort(3000);
    await killPort(8081);
    await killPort(8082);
    
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º backend
    const backendProcess = await startBackend();
    
    console.log('‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º frontend...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º frontend
    const frontendProcess = await startFrontend();
    
    console.log('\nüéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üåê Backend: http://localhost:3000');
    console.log('üì± Frontend: http://localhost:8082');
    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      
      if (backendProcess && backendProcess.kill) {
        backendProcess.kill('SIGTERM');
      }
      
      if (frontendProcess && frontendProcess.kill) {
        frontendProcess.kill('SIGTERM');
      }
      
      setTimeout(() => {
        process.exit(0);
      }, 2000);
    });
    
    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error.message);
    process.exit(1);
  }
}

main();