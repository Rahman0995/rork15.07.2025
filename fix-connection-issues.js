#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª...');
const envPath = '.env';
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  console.log('‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (envContent.includes('EXPO_PUBLIC_SUPABASE_URL') && envContent.includes('EXPO_PUBLIC_SUPABASE_ANON_KEY')) {
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –Ω–∞–π–¥–µ–Ω—ã –≤ .env');
  } else {
    console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env');
  }
} else {
  console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
const packageJsonPath = 'package.json';
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = [
    '@supabase/supabase-js',
    '@nkzw/create-context-hook',
    '@trpc/client',
    '@trpc/react-query'
  ];
  
  requiredDeps.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep}: ${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
    }
  });
} else {
  console.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
console.log('\n3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç...');
const testScript = `#!/usr/bin/env node

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

console.log('Supabase URL:', supabaseUrl || '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('Supabase Key:', supabaseKey ? '–ù–ê–°–¢–†–û–ï–ù' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');

if (supabaseUrl && supabaseKey) {
  console.log('‚úÖ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
} else {
  console.log('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  console.log('\\nüí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
  console.log('EXPO_PUBLIC_SUPABASE_URL=https://your-project.supabase.co');
  console.log('EXPO_PUBLIC_SUPABASE_ANON_KEY=your-anon-key');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É
console.log('\\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É...');
const http = require('http');

const testUrls = [
  'http://localhost:3000/api/health',
  'http://127.0.0.1:3000/api/health',
  'http://192.168.1.100:3000/api/health'
];

async function testUrl(url) {
  return new Promise((resolve) => {
    const req = http.get(url, (res) => {
      resolve({ url, success: true, status: res.statusCode });
    });
    
    req.on('error', () => {
      resolve({ url, success: false });
    });
    
    req.setTimeout(3000, () => {
      req.destroy();
      resolve({ url, success: false });
    });
  });
}

async function testBackend() {
  for (const url of testUrls) {
    const result = await testUrl(url);
    if (result.success) {
      console.log(\`‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: \${url}\`);
      return;
    } else {
      console.log(\`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: \${url}\`);
    }
  }
  
  console.log('‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö URL');
  console.log('\\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥:');
  console.log('node start-backend-simple.js');
}

testBackend().catch(console.error);
`;

fs.writeFileSync('test-env-and-backend.js', testScript);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω test-env-and-backend.js');

// 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
console.log('\n4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
const fixScript = `#!/usr/bin/env node

const fs = require('fs');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª
if (!fs.existsSync('.env')) {
  console.log('–°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...');
  const envContent = \`# Development Environment Variables
NODE_ENV=development

# Replace with your actual production API URL when deploying
EXPO_PUBLIC_RORK_API_BASE_URL=http://localhost:3000

# Local IP for mobile testing (replace with your actual IP)
LOCAL_IP=192.168.1.100

# Supabase Configuration
EXPO_PUBLIC_SUPABASE_URL=https://qcdqofdmflhgsabyopfe.supabase.co
EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjZHFvZmRtZmxoZ3NhYnlvcGZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5ODkxNTMsImV4cCI6MjA2ODU2NTE1M30.qYn87AuahL4H9Tin8nVIKlH9-3UnCmtHGEBOA3RhyjU

# Database Configuration
DATABASE_URL=mysql://root:iIZFrgdMlpXAJrScrhPwSsYjmjKcyfLT@switchyard.proxy.rlwy.net:13348/railway

# JWT Secret for authentication
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
\`;
  fs.writeFileSync('.env', envContent);
  console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
} else {
  console.log('‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

console.log('\\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
console.log('\\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-env-and-backend.js');
console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥: node start-backend-simple.js');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start');
`;

fs.writeFileSync('fix-issues.js', fixScript);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω fix-issues.js');

console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
console.log('node fix-issues.js');
console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
console.log('node test-env-and-backend.js');