#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');

function findLocalIPs() {
  const interfaces = os.networkInterfaces();
  const ips = [];
  
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      if (interface.family === 'IPv4' && !interface.internal) {
        ips.push({
          interface: name,
          address: interface.address,
          netmask: interface.netmask
        });
      }
    }
  }
  
  return ips;
}

function updateEnvFile(selectedIP) {
  const envPath = path.join(__dirname, '.env');
  
  try {
    let envContent = '';
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
    }
    
    // Update or add LOCAL_IP
    if (envContent.includes('LOCAL_IP=')) {
      envContent = envContent.replace(/LOCAL_IP=.*/, `LOCAL_IP=${selectedIP}`);
    } else {
      envContent += `\nLOCAL_IP=${selectedIP}\n`;
    }
    
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ Updated .env file with LOCAL_IP=${selectedIP}`);
  } catch (error) {
    console.error('‚ùå Error updating .env file:', error.message);
  }
}

function main() {
  console.log('üîß Fixing mobile connection issues...\n');
  
  const ips = findLocalIPs();
  
  if (ips.length === 0) {
    console.log('‚ùå No local IP addresses found.');
    console.log('Make sure you are connected to a network.');
    return;
  }
  
  console.log('üì± Available IP addresses:');
  ips.forEach((ip, index) => {
    console.log(`${index + 1}. ${ip.address} (${ip.interface})`);
  });
  
  // Auto-select the first non-loopback IP
  const selectedIP = ips[0].address;
  console.log(`\nüéØ Using IP: ${selectedIP}`);
  
  // Update .env file
  updateEnvFile(selectedIP);
  
  console.log('\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run backend:dev');
  console.log('2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run start');
  console.log('3. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
  console.log('4. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ IP –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ');
  
  console.log('\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  ips.forEach(ip => {
    console.log(`  - http://${ip.address}:3000`);
  });
  
  console.log('\n‚ö†Ô∏è  –í–∞–∂–Ω–æ:');
  console.log('- –¢–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π WiFi —Å–µ—Ç–∏');
  console.log('- –û—Ç–∫–ª—é—á–∏—Ç–µ VPN –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ');
  console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç 3000 –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π—Ä–≤–æ–ª–æ–º');
}

if (require.main === module) {
  main();
}

module.exports = { findLocalIPs, updateEnvFile };