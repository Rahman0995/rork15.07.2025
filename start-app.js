#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Backend + Frontend)...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess(command, args, options = {}) {
  return new Promise((resolve, reject) => {
    const process = spawn(command, args, {
      stdio: 'pipe',
      shell: true,
      ...options
    });

    process.stdout.on('data', (data) => {
      console.log(`[${options.name || 'Process'}] ${data.toString().trim()}`);
    });

    process.stderr.on('data', (data) => {
      console.error(`[${options.name || 'Process'} Error] ${data.toString().trim()}`);
    });

    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });

    process.on('error', (error) => {
      reject(error);
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    return process;
  });
}

async function main() {
  try {
    // –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üì° –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    const backendProcess = spawn('bun', ['run', 'dev'], {
      cwd: path.join(__dirname, 'backend'),
      stdio: 'pipe',
      shell: true
    });

    backendProcess.stdout.on('data', (data) => {
      console.log(`[Backend] ${data.toString().trim()}`);
    });

    backendProcess.stderr.on('data', (data) => {
      console.error(`[Backend Error] ${data.toString().trim()}`);
    });

    // –î–∞–µ–º –≤—Ä–µ–º—è backend —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    console.log('‚úÖ Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω');
    console.log('‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º frontend...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ó–∞–ø—É—Å–∫ Expo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üì± –ó–∞–ø—É—Å–∫ Expo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    const frontendProcess = spawn('expo', ['start', '--port', '8082'], {
      stdio: 'pipe',
      shell: true
    });

    frontendProcess.stdout.on('data', (data) => {
      console.log(`[Frontend] ${data.toString().trim()}`);
    });

    frontendProcess.stderr.on('data', (data) => {
      console.error(`[Frontend Error] ${data.toString().trim()}`);
    });

    console.log('‚úÖ Frontend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω');
    console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ Expo Go –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥');
    console.log('üåê –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–± –≤–µ—Ä—Å–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      backendProcess.kill('SIGTERM');
      frontendProcess.kill('SIGTERM');
      process.exit(0);
    });

    process.on('SIGTERM', () => {
      console.log('\nüîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      backendProcess.kill('SIGTERM');
      frontendProcess.kill('SIGTERM');
      process.exit(0);
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    await Promise.all([
      new Promise(resolve => backendProcess.on('close', resolve)),
      new Promise(resolve => frontendProcess.on('close', resolve))
    ]);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

main();